# GitHub Actions CI/CD Setup Guide

## Overview
The GitHub Actions workflow automatically builds Docker images for all MoolAI services (monitoring, orchestrator, controller) and pushes them to GitHub Container Registry.

## Prerequisites
1. GitHub repository with the MoolAI code
2. GitHub account with Container Registry enabled

## Setup Steps

### 1. Repository Setup
Push your code to GitHub:
```bash
# Initialize git repository (if not already done)
git init
git add .
git commit -m "Initial MoolAI system commit"

# Add GitHub remote (replace with your repository URL)
git remote add origin https://github.com/YOUR_USERNAME/moolai-system.git
git push -u origin main
```

### 2. GitHub Container Registry Permissions
No additional setup needed! The workflow uses the built-in `GITHUB_TOKEN` which automatically has the necessary permissions.

### 3. Workflow Configuration
The workflow is already configured in `.github/workflows/build-and-deploy.yml` and will:

**On Push to Main/Develop:**
- Build all 3 services (monitoring, orchestrator, controller)
- Create multi-platform images (AMD64/ARM64)
- Push to `ghcr.io/YOUR_USERNAME/moolai-*:latest`
- Run health checks and security scans

**On Pull Requests:**
- Build and test images
- Run security vulnerability scans
- Perform health check validation

### 4. Image Naming Convention
Built images will be available at:
- `ghcr.io/YOUR_USERNAME/moolai-monitoring:latest`
- `ghcr.io/YOUR_USERNAME/moolai-orchestrator:latest`
- `ghcr.io/YOUR_USERNAME/moolai-controller:latest`

Also tagged with:
- Branch name (e.g., `main`, `develop`)
- Git SHA (e.g., `main-a1b2c3d`)

### 5. Using the Built Images

#### Option A: Update docker-compose.yml
Replace the `build:` sections with `image:` references:

```yaml
# Before
orchestrator-org-001:
  build:
    context: .
    dockerfile: infrastructure/docker/Dockerfile.orchestrator

# After
orchestrator-org-001:
  image: ghcr.io/YOUR_USERNAME/moolai-orchestrator:latest
```

#### Option B: Pull and Run Manually
```bash
# Pull latest images
docker pull ghcr.io/YOUR_USERNAME/moolai-monitoring:latest
docker pull ghcr.io/YOUR_USERNAME/moolai-orchestrator:latest
docker pull ghcr.io/YOUR_USERNAME/moolai-controller:latest

# Run with existing docker-compose using pulled images
docker-compose up -d
```

### 6. Monitoring Builds
- Go to your GitHub repository â†’ Actions tab
- View build progress and logs
- Check for any failures in real-time

### 7. Making the Repository Public (Optional)
If you want to share the built images publicly:
1. Go to repository Settings â†’ General
2. Scroll to "Danger Zone" â†’ Change repository visibility
3. Choose "Make public"

### 8. Private Registry Alternative
If you prefer a different registry (Docker Hub, AWS ECR, etc.):
1. Update the `REGISTRY` environment variable in the workflow
2. Add registry credentials as GitHub Secrets
3. Update the login action configuration

## Workflow Features

### Automatic Builds
- âœ… Triggers on push to main/develop branches
- âœ… Triggers on pull requests to main
- âœ… Manual trigger support (`workflow_dispatch`)

### Multi-Platform Support
- âœ… Builds for AMD64 and ARM64 architectures
- âœ… Uses Docker Buildx for cross-platform builds

### Security & Testing
- âœ… Trivy vulnerability scanning
- âœ… Health check validation
- âœ… SARIF security reports uploaded to GitHub

### Optimization
- âœ… Docker layer caching for faster builds
- âœ… Parallel builds for all services
- âœ… Optimized .dockerignore excludes unnecessary files

### Image Metadata
- âœ… Proper labeling with build info
- âœ… Version tagging with Git metadata
- âœ… Build date and VCS reference tracking

## Troubleshooting

### Build Failures
1. Check the Actions tab for detailed error logs
2. Verify Dockerfile paths are correct
3. Ensure all required files are not excluded by .dockerignore

### Permission Issues
1. Verify repository has Actions enabled (Settings â†’ Actions)
2. Check that GITHUB_TOKEN has package write permissions (automatic)

### Image Not Found
1. Verify the image was pushed successfully in Actions logs
2. Check image name matches the expected format
3. Ensure you're authenticated to pull from ghcr.io:
   ```bash
   echo $GITHUB_TOKEN | docker login ghcr.io -u YOUR_USERNAME --password-stdin
   ```

## Benefits of This Setup
- âœ… Automated builds on every code change
- âœ… No manual build.sh execution needed
- âœ… Consistent, reproducible builds
- âœ… Built-in security scanning
- âœ… Free GitHub Container Registry hosting
- âœ… Multi-platform image support
- âœ… Easy deployment with pre-built images
- âœ… Documentation files excluded from builds and repository

## Next Steps
1. Push your code to GitHub
2. Watch the first build run automatically
3. Pull and test the built images locally
4. Update deployment processes to use pre-built images

Your CI/CD pipeline is now ready! ðŸš€