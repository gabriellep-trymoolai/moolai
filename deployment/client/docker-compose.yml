# MoolAI Client Deployment (Orchestrator + Monitoring Sidecar)
# Deploy this at each client site
version: '3.8'

networks:
  client-network:
    driver: bridge
    name: ${DOCKER_NETWORK:-moolai-client-network}

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  orchestrator-logs:
    driver: local
  monitoring-logs:
    driver: local
  client-backups:
    driver: local

services:
  # PostgreSQL Database for Client
  postgres-client:
    image: postgres:15-alpine
    restart: unless-stopped
    networks:
      - client-network
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    environment:
      POSTGRES_MULTIPLE_DATABASES: ${DB_NAME_ORCHESTRATOR:-orchestrator_org},${DB_NAME_MONITORING:-monitoring_org}
      POSTGRES_USER: ${DB_USER:-moolai_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - client-backups:/backups
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-moolai_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '${DB_CPU_LIMIT:-2.0}'
          memory: ${DB_MEMORY_LIMIT:-2048M}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID

  # Redis Cache for Client
  redis-client:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - client-network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-0.5}'
          memory: ${REDIS_MEMORY_LIMIT:-512M}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID

  # MoolAI Orchestrator Service
  orchestrator:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.orchestrator
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    image: moolai/orchestrator:${IMAGE_TAG:-latest}
    container_name: moolai-orchestrator-${ORGANIZATION_ID}
    restart: unless-stopped
    networks:
      - client-network
    ports:
      - "${ORCHESTRATOR_PORT:-8000}:8000"
    environment:
      # Organization Configuration
      ORGANIZATION_ID: ${ORGANIZATION_ID}
      ORCHESTRATOR_ID: ${ORCHESTRATOR_ID}
      
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-moolai_user}:${DB_PASSWORD}@postgres-client:5432/${DB_NAME_ORCHESTRATOR:-orchestrator_org}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-client:6379/0
      
      # Controller Connection
      CONTROLLER_URL: ${CONTROLLER_URL}
      CONTROLLER_API_KEY: ${CONTROLLER_API_KEY}
      
      # Service Configuration
      ORCHESTRATOR_PORT: ${ORCHESTRATOR_PORT:-8000}
      LOG_LEVEL: ${ORCHESTRATOR_LOG_LEVEL:-INFO}
      API_KEY: ${ORCHESTRATOR_API_KEY}
      
      # LLM Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      DEFAULT_LLM_PROVIDER: ${DEFAULT_LLM_PROVIDER:-openai}
      DEFAULT_LLM_MODEL: ${DEFAULT_LLM_MODEL:-gpt-4}
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # Python Settings
      PYTHONPATH: /app
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    volumes:
      - orchestrator-logs:/app/logs
      - ./config/orchestrator:/app/config:ro
    depends_on:
      postgres-client:
        condition: service_healthy
      redis-client:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ORCHESTRATOR_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '${ORCHESTRATOR_CPU_LIMIT:-2.0}'
          memory: ${ORCHESTRATOR_MEMORY_LIMIT:-2048M}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # MoolAI Monitoring Sidecar Service
  monitoring:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.monitoring
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    image: moolai/monitoring:${IMAGE_TAG:-latest}
    container_name: moolai-monitoring-${ORGANIZATION_ID}
    restart: unless-stopped
    networks:
      - client-network
    ports:
      - "${MONITORING_PORT:-8001}:8001"
    environment:
      # Sidecar Mode Configuration
      MONITORING_MODE: sidecar
      ORGANIZATION_ID: ${ORGANIZATION_ID}
      ORCHESTRATOR_ID: ${ORCHESTRATOR_ID}
      
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-moolai_user}:${DB_PASSWORD}@postgres-client:5432/${DB_NAME_MONITORING:-monitoring_org}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-client:6379/1
      
      # Orchestrator Connection
      ORCHESTRATOR_URL: http://orchestrator:${ORCHESTRATOR_PORT:-8000}
      
      # Controller Connection
      CONTROLLER_URL: ${CONTROLLER_URL}
      CONTROLLER_API_KEY: ${CONTROLLER_API_KEY}
      
      # Service Configuration
      API_PORT: ${MONITORING_PORT:-8001}
      LOG_LEVEL: ${MONITORING_LOG_LEVEL:-INFO}
      
      # Metrics Collection
      METRICS_COLLECTION_INTERVAL: ${METRICS_COLLECTION_INTERVAL:-30}
      AUTO_COLLECT: ${AUTO_COLLECT:-true}
      
      # Python Settings
      PYTHONPATH: /app
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    volumes:
      - monitoring-logs:/app/logs
      - ./config/monitoring:/app/config:ro
    depends_on:
      postgres-client:
        condition: service_healthy
      redis-client:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MONITORING_PORT:-8001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '${MONITORING_CPU_LIMIT:-1.0}'
          memory: ${MONITORING_MEMORY_LIMIT:-1024M}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID